#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 16
#define TEXEL_WINDOW   20
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct WeightInfo
{
    vec4 weightColor;
    float normWeight;
};

layout(push_constant) uniform params_t
{
    int width;
    int height;
    float spatialSigma;
    float colorSigma;

} params;

layout (binding = 0) buffer buf { WeightInfo imageData[]; };
layout (binding = 1) uniform sampler2D inputTex;
layout (binding = 2) uniform sampler2D layerTex;

void bilateralFilter(ivec2 a_texCoord)
{
    vec4 layerColor = texelFetch(layerTex, a_texCoord, 0);

    // controls the influence of distant pixels
    const float spatialSigma = params.spatialSigma;
    // controls the influence of pixels with intesity value different form pixel intensity
    const float colorSigma   = params.colorSigma;

    float normWeight  = 0.;
    vec4  weightColor = vec4(0);

    for (int i = -TEXEL_WINDOW; i <= TEXEL_WINDOW; ++i)
    {
        for (int j = -TEXEL_WINDOW; j <= TEXEL_WINDOW; ++j)
        {
            float spatialDistance = sqrt(float(pow(i, 2) + pow(j, 2)));
            float spatialWeight = exp(-0.5 * pow(spatialDistance / spatialSigma, 2.));

            ivec2 curCoord      = ivec2(i, j) + a_texCoord;
            vec4  curColor      = texelFetch(layerTex, curCoord, 0);
            float colorDistance = sqrt(float(pow(layerColor.x - curColor.x, 2)
                        + pow(layerColor.y - curColor.y, 2)
                        + pow(layerColor.z - curColor.z, 2)));
            float colorWeight   = exp(-0.5 * pow(colorDistance / colorSigma, 2.));

            float resultWeight = spatialWeight * colorWeight;

            weightColor += texelFetch(inputTex, curCoord, 0) * resultWeight;
            normWeight  += resultWeight;
        }
    }

    imageData[params.width * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].weightColor += weightColor;
    imageData[params.width * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].normWeight  += normWeight;
}

void main()
{
    if (gl_GlobalInvocationID.x >= params.width || gl_GlobalInvocationID.y >= params.height)
        return;

    ivec2 texCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    bilateralFilter(texCoord);
}

