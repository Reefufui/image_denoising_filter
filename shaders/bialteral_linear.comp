#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 16
#define TEXEL_WINDOW   20
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Pixel
{
    vec4 value;
};

layout(push_constant) uniform params_t
{
    int width;
    int height;

} params;

layout(std140, binding = 0) buffer buf
{
    Pixel resultImageData[];
};

layout (binding = 1) uniform samplerBuffer inputImageData;

vec4 bialteralFilter(int a_texCoord)
{
    vec4 texColor = texelFetch(inputImageData, a_texCoord);

    if (   (gl_GlobalInvocationID.x - TEXEL_WINDOW) < 0 
        || (gl_GlobalInvocationID.y - TEXEL_WINDOW) < 0
        || (gl_GlobalInvocationID.x + TEXEL_WINDOW) > params.width
        || (gl_GlobalInvocationID.y + TEXEL_WINDOW) > params.height)
    {
        return texColor;
    }

    // controls the influence of distant pixels
    const float spatialSigma = 10;
    // controls the influence of pixels with intesity value different form pixel intensity
    const float colorSigma   = 0.2;

    float normWeight  = 0.;
    vec4  weightColor = vec4(0);

    for (int i = -TEXEL_WINDOW; i <= TEXEL_WINDOW; ++i)
    {
        for (int j = -TEXEL_WINDOW; j <= TEXEL_WINDOW; ++j)
        {
            float spatialDistance = sqrt(float(pow(i, 2) + pow(j, 2)));
            float spatialWeight = exp(-0.5 * pow(spatialDistance / spatialSigma, 2.));

            vec4 curColor = texelFetch(inputImageData, a_texCoord + j + i * params.width);
            float colorDistance = sqrt(float(pow(texColor.x - curColor.x, 2)
                + pow(texColor.y - curColor.y, 2)
                + pow(texColor.z - curColor.z, 2)));
            float colorWeight   = exp(-0.5 * pow(colorDistance / colorSigma, 2.));

            float resultWeight = spatialWeight * colorWeight;

            weightColor += curColor * resultWeight;
            normWeight  += resultWeight;
        }
    }

    return weightColor / normWeight;
}

void main()
{
    if (gl_GlobalInvocationID.x >= params.width || gl_GlobalInvocationID.y >= params.height)
        return;

    int texCoord = int(gl_GlobalInvocationID.x) + int(gl_GlobalInvocationID.y) * params.width;
    resultImageData[params.width * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = bialteralFilter(texCoord);
}
