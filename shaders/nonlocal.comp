#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 16
#define PATCH_WINDOW   3

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct WeightInfo
{
    vec4 weightColor;
    float normWeight;
};

layout(push_constant) uniform u_params_t
{
    int width;
    int height;

} u_params;

layout (binding = 0) buffer    buf { WeightInfo nlmData[]; };
layout (binding = 1) uniform sampler2D u_targetImage;
layout (binding = 2) uniform sampler2D u_neighbourImage;

void nlmDenoice(ivec2 a_texCoord)
{
    const float filteringParameter = 10.8f;
    const int   stride = 15;
    float normWeight = 0.001f;
    vec4 weightColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);

    // Loop through all pixels of an image
    for (int y = PATCH_WINDOW; y < u_params.height - PATCH_WINDOW; y += stride)
    {
        for (int x = PATCH_WINDOW; x < u_params.width - PATCH_WINDOW; x += stride)
        {
            float colorDistance = 0.0f;

            for (int j = - PATCH_WINDOW; j < PATCH_WINDOW; ++j)
            {
                for (int i = - PATCH_WINDOW; i < PATCH_WINDOW; ++i)
                {
                    vec4 targetColor    = texelFetch(u_targetImage, ivec2(i, j) + a_texCoord, 0);
                    vec4 neighbourColor = texelFetch(u_neighbourImage, ivec2(i + x, j + y), 0);

                    colorDistance += pow(targetColor.x - neighbourColor.x, 2.f)
                        + pow(targetColor.y - neighbourColor.y, 2.f)
                        + pow(targetColor.z - neighbourColor.z, 2.f);
                }
            }

            float weight = exp(- colorDistance / pow(filteringParameter, 2.f));
            weightColor += texelFetch(u_neighbourImage, ivec2(x, y), 0) * weight;
            normWeight += weight;
        }
    }

    nlmData[u_params.width * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].weightColor = weightColor;
    nlmData[u_params.width * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].normWeight  = normWeight;
}

void main()
{
    if (gl_GlobalInvocationID.x >= u_params.width || gl_GlobalInvocationID.y >= u_params.height)
        return;

    ivec2 texCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    nlmDenoice(texCoord);
}
